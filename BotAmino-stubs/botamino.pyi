from typing import (
    Any,
    Dict,
    Iterable,
    List,
    Literal,
    Optional,
    Union
)
from aminofix import Client  # type: ignore
from aminofix.lib.util.objects import (  # type: ignore
    Event,
    UserProfile
)
from .bannedwords import BannedWords
from .bot import Bot
from .command import Command
from .parameters import Parameters
from .timeout import TimeOut
from .typing import (
    CallbackCategory,
    ParserFeature
)

__all__ = ('BotAmino',)


class BotAmino(Command, Client, TimeOut, BannedWords):  # type: ignore
    def __init__(
        self,
        email: Optional[str] = None,
        password: Optional[str] = None,
        sid: Optional[str] = None,
        deviceId: Optional[str] = None,
        proxies: Optional[Dict[str, str]] = None,
        certificatePath: Optional[str] = None,
        parser_feature: ParserFeature = 'default'
    ) -> None:
        self.parser_feature: ParserFeature
        self.communaute: Dict[int, Bot]
        self.botId: str
        self.perms_list: List[str]
        self.prefix: str
        self.wait: int
        self.admin_user: str
        self.bio: Optional[Union[List[str], str]]
        self.self_callable: bool
        self.no_command_message: str
        self.spam_message: str
        self.lock_message: str
        self.launched: bool
        # fixed Client annotations
        self.certificatePath: Optional[str]
        self.device_id: str
        self.json: Dict[str, Any]
        self.proxies: Optional[Dict[str, str]]
        self.secret: Optional[str]
        self.sid: str
        self.userId: str
        self.account: UserProfile  # incorrect object (account not profile)
        self.profile: UserProfile
    def parse_headers(self, data: Optional[str] = None, type: Optional[str] = None) -> Dict[str, Any]: ...
    @property
    def len_community(self) -> int: ...
    def tradlist(self, aminoIdOrLink: Union[Iterable[str], str]) -> List[str]: ...
    def add_community(self, comId: int, activity: bool) -> None: ...
    def get_community(self, comId: int) -> Bot: ...
    def is_it_bot(self, uid: str) -> bool: ...
    def is_it_admin(self, uid: str) -> bool: ...
    def get_wallet_amount(self) -> int: ...
    def generate_transaction_id(self) -> str: ...
    def start_video_chat(self, comId: int, chatId: str, joinType: int = 1) -> None: ...
    def start_screen_room(self, comId: int, chatId: str, joinType: int = 1) -> None: ...
    def join_screen_room(self, comId: int, chatId: str) -> None: ...
    def start_voice_room(self, comId: int, chatId: str, joinType: int = 1) -> None: ...
    def end_voice_room(self, comId: int, chatId: str) -> None: ...
    def show_online(self, comId: int) -> None: ...
    def check(self, args: Parameters, *can: Literal['admin', 'bot', 'staff'], id_: Optional[str] = None) -> bool: ...
    def check_all(self) -> None: ...
    def threadLaunch(self, comId: int, passive: bool = False) -> None: ...
    def launch(self, passive: bool = False) -> None: ...
    def single_launch(self, comId: int, passive: bool = False) -> None: ...
    def launch_events(self) -> None: ...
    def message_analyse(self, data: Event, category: CallbackCategory) -> None: ...
    def on_member_event(self, data: Event, category: CallbackCategory) -> None: ...
    def launch_text_message(self) -> None: ...
    def launch_other_message(self) -> None: ...
    def launch_all_message(self) -> None: ...
    def launch_delete_message(self) -> None: ...
    def launch_removed_message(self) -> None: ...
    def launch_on_member_join_chat(self) -> None: ...
    def launch_on_member_leave_chat(self) -> None: ...
    def launch_all_events(self) -> None: ...
