from typing import (
    Any,
    BinaryIO,
    Dict,
    Iterable,
    List,
    Literal,
    Optional,
    Union,
    overload
)
from aminofix import Client  # type: ignore
from aminofix.lib.util.objects import (  # type: ignore
    BlogList,
    CommentList,
    Community,
    CommunityList,
    Event,
    FromCode,
    GetBlogInfo,
    GetMessages,
    GetWikiInfo,
    Membership,
    Message,
    SharedFolderFile,
    Thread,
    ThreadList,
    UserProfile,
    UserProfileCountList,
    UserProfileList,
    VisitorsList,
    WalletHistory,
    WalletInfo
)
from .bannedwords import BannedWords
from .bot import Bot
from .command import Command
from .parameters import Parameters
from .timeout import TimeOut
from .typing import (
    CallbackCategory,
    ParserFeature
)

__all__ = ('BotAmino',)


class BotAmino(Command, Client, TimeOut, BannedWords):  # type: ignore
    def __init__(
        self,
        email: Optional[str] = None,
        password: Optional[str] = None,
        sid: Optional[str] = None,
        deviceId: Optional[str] = None,
        proxies: Optional[Dict[str, str]] = None,
        certificatePath: Optional[str] = None,
        parser_feature: ParserFeature = 'default'
    ) -> None:
        self.parser_feature: ParserFeature
        self.communaute: Dict[int, Bot]
        self.botId: str
        self.perms_list: List[str]
        self.prefix: str
        self.wait: int
        self.admin_user: str
        self.bio: Optional[Union[List[str], str]]
        self.self_callable: bool
        self.no_command_message: str
        self.spam_message: str
        self.lock_message: str
        self.launched: bool
        # fixed Client annotations
        self.certificatePath: Optional[str]
        self.device_id: str
        self.json: Dict[str, Any]
        self.proxies: Optional[Dict[str, str]]
        self.secret: Optional[str]
        self.sid: str
        self.userId: str
        self.account: UserProfile  # incorrect object (account not profile)
        self.profile: UserProfile
    def parse_headers(self, data: Optional[str] = None, type: Optional[str] = None) -> Dict[str, Any]: ...
    @property
    def len_community(self) -> int: ...
    def tradlist(self, aminoIdOrLink: Union[Iterable[str], str]) -> List[str]: ...
    def add_community(self, comId: int, activity: bool) -> None: ...
    def get_community(self, comId: int) -> Bot: ...
    def is_it_bot(self, uid: str) -> bool: ...
    def is_it_admin(self, uid: str) -> bool: ...
    def get_wallet_amount(self) -> int: ...
    def generate_transaction_id(self) -> str: ...
    def start_video_chat(self, comId: int, chatId: str, joinType: int = 1) -> None: ...
    def start_screen_room(self, comId: int, chatId: str, joinType: int = 1) -> None: ...
    def join_screen_room(self, comId: int, chatId: str) -> None: ...
    def start_voice_room(self, comId: int, chatId: str, joinType: int = 1) -> None: ...
    def end_voice_room(self, comId: int, chatId: str) -> None: ...
    def show_online(self, comId: int) -> None: ...
    def check(self, args: Parameters, *can: Literal['admin', 'bot', 'staff'], id_: Optional[str] = None) -> bool: ...
    def check_all(self) -> None: ...
    def threadLaunch(self, comId: int, passive: bool = False) -> None: ...
    def launch(self, passive: bool = False) -> None: ...
    def single_launch(self, comId: int, passive: bool = False) -> None: ...
    def launch_events(self) -> None: ...
    def message_analyse(self, data: Event, category: CallbackCategory) -> None: ...
    def on_member_event(self, data: Event, category: CallbackCategory) -> None: ...
    def launch_text_message(self) -> None: ...
    def launch_other_message(self) -> None: ...
    def launch_all_message(self) -> None: ...
    def launch_delete_message(self) -> None: ...
    def launch_removed_message(self) -> None: ...
    def launch_on_member_join_chat(self) -> None: ...
    def launch_on_member_leave_chat(self) -> None: ...
    def launch_all_events(self) -> None: ...
    # amino.fix stubs
    def join_voice_chat(self, comId: int, chatId: str, joinType: int = 1) -> None: ...
    def join_video_chat(self, comId: int, chatId: str, joinType: int = 1) -> None: ...
    def join_video_chat_as_viewer(self, comId: int, chatId: str) -> None: ...
    def leave_from_live_chat(self, chatId: str) -> None: ...
    def run_vc(self, comId: int, chatId: str, joinType: int = 1) -> None: ...
    def start_vc(self, comId: int, chatId: str, joinType: int = 1) -> None: ...
    def end_vc(self, comId: int, chatId: str, joinType: int = 2) -> None: ...
    def login_sid(self, SID: str) -> None: ...
    def login(self, email: str, password: str) -> Dict[str, Any]: ...
    def login_phone(self, phoneNumber: str, password: str) -> Dict[str, Any]: ...
    def login_secret(self, secret: str) -> Dict[str, Any]: ...
    def register(
        self,
        nickname: str,
        email: str,
        password: str,
        verificationCode: str,
        deviceId: Optional[str] = None,
        timeout: Optional[float] = None
    ) -> Dict[str, Any]: ...
    def restore(self, email: str, password: str) -> Literal[200]: ...
    def logout(self) -> Literal[200]: ...
    def configure(self, age: int, gender: str) -> Literal[200]: ...
    def verify(self, email: str, code: str) -> Literal[200]: ...
    def request_verify_code(self, email: str, resetPassword: bool = False, timeout: Optional[float] = None) -> Literal[200]: ...
    def activate_account(self, email: str, code: str) -> Literal[200]: ...
    def delete_account(self, password: str) -> Literal[200]: ...
    def change_password(self, email: str, password: str, code: str) -> Literal[200]: ...
    def check_device(self, deviceId: str) -> Literal[200]: ...
    def get_account_info(self) -> UserProfile: ...
    def upload_media(self, file: BinaryIO, fileType: str) -> str: ...
    def get_eventlog(self) -> Dict[str, Any]: ...
    def sub_clients(self, start: int = 0, size: int = 25) -> CommunityList: ...
    def sub_clients_profile(self, start: int = 0, size: int = 25) -> Dict[str, Dict[str, Any]]: ...
    def get_user_info(self, userId: str) -> UserProfile: ...
    def watch_ad(self, userId: Optional[str] = None) -> Literal[200]: ...
    def get_chat_threads(self, start: int = 0, size: int = 25) -> ThreadList: ...
    def get_chat_thread(self, chatId: str) -> Thread: ...
    def get_chat_users(self, chatId: str, start: int = 0, size: int = 25) -> UserProfileList: ...
    def join_chat(self, chatId: str) -> Literal[200]: ...
    def leave_chat(self, chatId: str) -> Literal[200]: ...
    def start_chat(
        self,
        userId: Union[List[str], str],
        message: str,
        title: Optional[str] = None,
        content: Optional[str] = None,
        isGlobal: bool = False,
        publishToGlobal: bool = False
    ) -> Thread: ...
    def invite_to_chat(self, userId: Union[List[str], str], chatId: str) -> Literal[200]: ...
    def kick(self, userId: str, chatId: str, allowRejoin: bool = True) -> Literal[200]: ...
    def get_chat_messages(self, chatId: str, size: int = 25, pageToken: Optional[str] = None) -> GetMessages: ...
    def get_message_info(self, chatId: str, messageId: str) -> Message: ...
    def get_community_info(self, comId: str) -> Community: ...
    def search_community(self, aminoId: str) -> CommunityList: ...
    def get_user_following(self, userId: str, start: int = 0, size: int = 25) -> UserProfileList: ...
    def get_user_followers(self, userId: str, start: int = 0, size: int = 25) -> UserProfileList: ...
    def get_user_visitors(self, userId: str, start: int = 0, size: int = 25) -> VisitorsList: ...
    def get_blocked_users(self, start: int = 0, size: int = 25) -> UserProfileList: ...
    @overload
    def get_blog_info(self, blogId: Optional[str] = None, *, quizId: Optional[str] = None) -> GetBlogInfo: ...
    @overload
    def get_blog_info(self, *, wikiId: str) -> GetWikiInfo: ...
    @overload
    def get_blog_info(self, *, fileId: Optional[str] = None) -> SharedFolderFile: ...
    @overload
    def get_blog_info(self, blogId: Optional[str] = None, wikiId: Optional[str] = None, quizId: Optional[str] = None, fileId: Optional[str] = None) -> Union[GetBlogInfo, GetWikiInfo, SharedFolderFile]: ...
    def get_blog_comments(
        self,
        blogId: Optional[str] = None,
        wikiId: Optional[str] = None,
        quizId: Optional[str] = None,
        fileId: Optional[str] = None,
        sorting: str = "newest",
        start: int = 0,
        size: int = 25
    ) -> CommentList: ...
    def get_blocker_users(self, start: int = 0, size: int = 25) -> List[str]: ...
    def get_wall_comments(self, userId: str, sorting: str, start: int = 0, size: int = 25) -> CommentList: ...
    def flag(
        self,
        reason: str,
        flagType: int,
        userId: Optional[str] = None,
        blogId: Optional[str] = None,
        wikiId: Optional[str] = None,
        asGuest: bool = False
    ) -> Literal[200]: ...
    def send_message(
        self,
        chatId: str,
        message: Optional[str] = None,
        messageType: int = 0,
        file: Optional[BinaryIO] = None,
        fileType: Optional[Literal["audio", "image", "gif"]] = None,
        replyTo: Optional[str] = None,
        mentionUserIds: Optional[List[str]] = None,
        stickerId: Optional[str] = None,
        embedId: Optional[str] = None,
        embedType: Optional[int] = None,
        embedLink: Optional[str] = None,
        embedTitle: Optional[str] = None,
        embedContent: Optional[str] = None,
        embedImage: Optional[BinaryIO] = None
    ) -> Literal[200]: ...
    def delete_message(self, chatId: str, messageId: str, asStaff: bool = False, reason: Optional[str] = None) -> Literal[200]: ...
    def mark_as_read(self, chatId: str, messageId: str) -> Literal[200]: ...
    def edit_chat(
        self,
        chatId: str,
        doNotDisturb: Optional[bool] = None,
        pinChat: Optional[bool] = None,
        title: Optional[str] = None,
        icon: Optional[str] = None,
        backgroundImage: Optional[str] = None,
        content: Optional[str] = None,
        announcement: Optional[str] = None,
        coHosts: Optional[List[str]] = None,
        keywords: Optional[List[str]] = None,
        pinAnnouncement: Optional[bool] = None,
        publishToGlobal: Optional[bool] = None,
        canTip: Optional[bool] = None,
        viewOnly: Optional[bool] = None,
        canInvite: Optional[bool] = None,
        fansOnly: Optional[bool] = None
    ) -> List[Literal[200]]: ...
    def visit(self, userId: str) -> Literal[200]: ...
    def send_coins(
        self,
        coins: int,
        blogId: Optional[str] = None,
        chatId: Optional[str] = None,
        objectId: Optional[str] = None,
        transactionId: Optional[str] = None
    ) -> Literal[200]: ...
    def follow(self, userId: Union[List[str], str]) -> Literal[200]: ...
    def unfollow(self, userId: str) -> Literal[200]: ...
    def block(self, userId: str) -> Literal[200]: ...
    def unblock(self, userId: str) -> Literal[200]: ...
    def join_community(self, comId: str, invitationId: Optional[str] = None) -> Literal[200]: ...
    def request_join_community(self, comId: str, message: Optional[str] = None) -> Literal[200]: ...
    def leave_community(self, comId: str) -> Literal[200]: ...
    def flag_community(self, comId: str, reason: str, flagType: int, isGuest: bool = False) -> Literal[200]: ...
    def edit_profile(
        self,
        nickname: Optional[str] = None,
        content: Optional[str] = None,
        icon: Optional[BinaryIO] = None,
        backgroundColor: Optional[str] = None,
        backgroundImage: Optional[str] = None,
        defaultBubbleId: Optional[str] = None
    ) -> Literal[200]: ...
    def set_privacy_status(self, isAnonymous: bool = False, getNotifications: bool = False) -> Literal[200]: ...
    def set_amino_id(self, aminoId: str) -> Literal[200]: ...
    def get_linked_communities(self, userId: str) -> CommunityList: ...
    def get_unlinked_communities(self, userId: str) -> CommunityList: ...
    def reorder_linked_communities(self, comIds: List[int]) -> Literal[200]: ...
    def add_linked_community(self, comId: Union[int, str]) -> Literal[200]: ...
    def remove_linked_community(self, comId: Union[int, str]) -> Literal[200]: ...
    def comment(
        self,
        message: str,
        userId: Optional[str] = None,
        blogId: Optional[str] = None,
        wikiId: Optional[str] = None,
        replyTo: Optional[str] = None
    ) -> Literal[200]: ...
    def delete_comment(self, commentId: str, userId: Optional[str] = None, blogId: Optional[str] = None, wikiId: Optional[str] = None) -> Literal[200]: ...
    def like_blog(self, blogId: Optional[Union[list[str], str]] = None, wikiId: Optional[str] = None) -> Literal[200]: ...
    def unlike_blog(self, blogId: Optional[str] = None, wikiId: Optional[str] = None) -> Literal[200]: ...
    def like_comment(self, commentId: str, userId: Optional[str] = None, blogId: Optional[str] = None, wikiId: Optional[str] = None) -> Literal[200]: ...
    def unlike_comment(self, commentId: str, userId: Optional[str] = None, blogId: Optional[str] = None, wikiId: Optional[str] = None) -> Literal[200]: ...
    def get_membership_info(self) -> Membership: ...
    def get_ta_announcements(self, language: str = "en", start: int = 0, size: int = 25) -> BlogList: ...
    def get_wallet_info(self) -> WalletInfo: ...
    def get_wallet_history(self, start: int = 0, size: int = 25) -> WalletHistory: ...
    def get_from_deviceid(self, deviceId: str) -> str: ...
    def get_from_code(self, code: str) -> FromCode: ...
    def get_from_id(self, objectId: str, objectType: int, comId: Optional[int] = None) -> FromCode: ...
    def get_supported_languages(self) -> List[str]: ...
    def claim_new_user_coupon(self) -> Literal[200]: ...
    def get_subscriptions(self, start: int = 0, size: int = 25) -> List[Dict[str, Any]]: ...
    def get_all_users(self, start: int = 0, size: int = 25) -> UserProfileCountList: ...
    def accept_host(self, chatId: str, requestId: str) -> Literal[200]: ...
    def accept_organizer(self, chatId: str, requestId: str) -> Literal[200]: ...
    def link_identify(self, code: str) -> Dict[str, Any]: ...
    def invite_to_vc(self, chatId: str, userId: str) -> Literal[200]: ...
    def wallet_config(self, level: int) -> Literal[200]: ...
    def purchase(self, objectId: str, isAutoRenew: bool = False) -> Literal[200]: ...
    def get_public_communities(self, language: str = "en", size: int = 25) -> CommunityList: ...
