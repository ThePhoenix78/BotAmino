from typing import (
    Any,
    Dict,
    List,
    Literal,
    Optional,
    Tuple,
    Union,
    overload
)
from aminofix import ACM, SubClient  # type: ignore
from aminofix.lib.util.objects import ThreadList, UserProfile  # type: ignore
from .botamino import BotAmino

__all__ = ('Bot',)


class Bot(SubClient, ACM):  # type: ignore
    def __init__(
        self,
        client: BotAmino,
        community: Union[int, str],
        prefix: str = "!",
        bio: Optional[Union[List[str], str]] = None,
        activity: bool = False
    ) -> None:
        self.client: BotAmino
        self.prefix: str
        self.bio_contents: Optional[Union[List[str], str]]
        self.activity: bool
        self.marche: bool
        self.community_amino_id: str
        self.community_id: int
        self.community_leader_agent_id: str
        self.community_name: str
        self.community_leaders: List[str]
        self.community_curators: List[str]
        self.community_staff: List[str]
        self.banned_words: List[str]
        self.locked_command: List[str]
        self.message_bvn: Optional[str]
        self.welcome_chat: Optional[str]
        self.favorite_users: List[str]
        self.favorite_chats: List[str]
        self.new_users: List[str]
        # fixed SubClient annotations
        self.comId: int
        self.certificatePath: Optional[str]
        self.device_id: str
        self.json: Dict[str, Any]
        self.proxies: Optional[Dict[str, str]]
        self.secret: Optional[str]
        self.sid: str
        self.userId: str
        self.account: UserProfile  # incorrect object (account not profile)
        self.profile: UserProfile

    def parse_headers(self, data: Optional[str] = None, type: Optional[str] = None) -> Dict[str, Any]: ...

    @property
    def community_filename(self) -> str: ...
    def create_community_file(self) -> None: ...
    def update_file(self, data: Optional[Dict[str, Any]] = None) -> None: ...
    def create_dict(self) -> Dict[str, Any]: ...
    def get_dict(self) -> Dict[str, Any]: ...
    @overload
    def get_file_info(self, key: Literal["prefix"]) -> str: ...
    @overload
    def get_file_info(self, key: Literal["welcome", "welcome_chat"]) -> Optional[str]: ...
    @overload
    def get_file_info(self, key: Literal["banned_words", "favorite_users", "favorite_chats", "locked_command"]) -> List[str]: ...
    def get_file_dict(self) -> Dict[str, Any]: ...
    def get_banned_words(self) -> List[str]: ...
    def set_prefix(self, prefix: str) -> None: ...
    def set_welcome_message(self, message: str) -> None: ...
    def set_welcome_chat(self, chatId: str) -> None: ...
    def add_favorite_users(self, value: Union[List[str], str]) -> None: ...
    def add_favorite_chats(self, value: Union[List[str], str]) -> None: ...
    def add_banned_words(self, words: Union[List[str], str]) -> None: ...
    def add_locked_command(self, commands: Union[List[str], str]) -> None: ...
    def remove_favorite_users(self, value: Union[List[str], str]) -> None: ...
    def remove_favorite_chats(self, value: Union[List[str], str]) -> None: ...
    def remove_banned_words(self, words: Union[List[str], str]) -> None: ...
    def remove_locked_command(self, commands: Union[List[str], str]) -> None: ...
    def unset_welcome_chat(self) -> None: ...
    def is_in_staff(self, uid: str) -> bool: ...
    def is_leader(self, uid: str) -> bool: ...
    def is_curator(self, uid: str) -> bool: ...
    def is_agent(self, uid: str) -> bool: ...
    def copy_bubble(self, chatId: str, replyId: str, comId: Optional[int] = None) -> None: ...
    @overload
    def accept_role(self, rid: str) -> bool: ...
    @overload
    def accept_role(self, rid: str, chatId: Optional[str]) -> bool: ...
    def get_staff(self, comIdOrAminoId: Union[int, str]) -> List[str]: ...
    def get_user_id(self, name_or_id: str) -> Optional[Tuple[str, str]]: ...
    def ask_all_members(self, message: str, lvl: int = 20, type_bool: Literal[1, 2, 3] = 1) -> None: ...
    def ask_amino_staff(self, message: str) -> None: ...
    def stop_instance(self) -> None: ...
    def start_instance(self) -> None: ...
    def leave_amino(self) -> None: ...
    def check_new_member(self) -> None: ...
    def welcome_new_member(self) -> None: ...
    def feature_chats(self) -> None: ...
    def feature_users(self) -> None: ...
    def get_member_level(self, uid: str) -> int: ...
    def get_member_titles(self, uid: str) -> List[Dict[Literal['title', 'color'], str]]: ...
    def get_wallet_amount(self) -> int: ...
    def generate_transaction_id(self) -> str: ...
    @overload
    def pay(self, coins: int, *, blogId: str, transactionId: Optional[str] = None) -> None: ...
    @overload
    def pay(self, coins: int, *, chatId: Optional[str] = None, transactionId: Optional[str] = None) -> None: ...
    @overload
    def pay(self, coins: int, *, objectId: Optional[str] = None, transactionId: Optional[str] = None) -> None: ...
    @overload
    def favorite(self, time: Literal[1, 2, 3] = 1, *, userId: str) -> None: ...
    @overload
    def favorite(self, time: Literal[1, 2, 3] = 1, *, chatId: str) -> None: ...
    @overload
    def favorite(self, time: Literal[1, 2, 3] = 1, *, blogId: str) -> None: ...
    @overload
    def favorite(self, time: Literal[1, 2, 3] = 1, *, wikiId: str) -> None: ...
    @overload
    def unfavorite(self, *, userId: str) -> None: ...
    @overload
    def unfavorite(self, *, chatId: str) -> None: ...
    @overload
    def unfavorite(self, *, blogId: str) -> None: ...
    @overload
    def unfavorite(self, *, wikiId: str) -> None: ...
    @overload
    def join_chatroom(self, chat: str) -> bool: ...
    @overload
    def join_chatroom(self, *, chatId: str) -> bool: ...
    def start_screen_room(self, chatId: str, joinType: int = 1) -> None: ...
    def start_video_chat(self, chatId: str, joinType: int = 1) -> None: ...
    def start_voice_room(self, chatId: str, joinType: int = 1) -> None: ...
    def join_screen_room(self, chatId: str, joinType: int = 1) -> None: ...
    def get_chats(self, type: str = "recommended", start: int = 0, size: int = 250) -> ThreadList: ...
    def join_all_chat(self) -> None: ...
    def leave_all_chats(self) -> None: ...
    def follow_user(self, uid: Union[str, List[str]]) -> None: ...
    def unfollow_user(self, uid: str) -> None: ...
    def add_title(self, uid: str, title: str, color: Optional[str] = None) -> None: ...
    def remove_title(self, uid: str, title: str) -> None: ...
    def passive(self) -> None: ...
