from collections.abc import Sequence
from typing import (
    Any,
    Literal
)
from aminofix import Client
from aminofix.lib.util.objects import Event
from .bannedwords import BannedWords
from .bot import Bot
from .commands import CommandHandler
from .parameters import Parameters
from .timeout import TimeOut
from .typing import (
    CallbackCategory,
    ParserFeature
)

__all__ = ('BotAmino',)


class BotAmino(CommandHandler, Client, TimeOut, BannedWords):
    def __init__(
        self,
        email: str | None = None,
        password: str | None = None,
        sid: str | None = None,
        deviceId: str | None = None,
        proxies: dict[str, str] | None = None,
        certificatePath: str | None = None,
        parser_feature: ParserFeature = 'default',
        language: str = 'en'
    ) -> None:
        self.parser_feature: ParserFeature
        self.language: str
        self.communaute: dict[int, Bot]
        self.botId: str
        self.perms_list: list[str]
        self.prefix: str
        self.wait: int
        self.admin_user: str
        self.bio: list[str] | str | None
        self.self_callable: bool
        self.no_command_message: str
        self.spam_message: str
        self.lock_message: str
        self.launched: bool
        # fixed Client annotations
        self.sid: str
        self.userId: str
    def parse_headers(self, data: str | None = None, type: str | None = None) -> dict[str, Any]: ...
    @property
    def len_community(self) -> int: ...
    def tradlist(self, aminoIdOrLink: Sequence[str] | str) -> list[str]: ...
    def add_community(self, comId: int, activity: bool) -> None: ...
    def get_community(self, comId: int) -> Bot: ...
    def is_it_bot(self, uid: str) -> bool: ...
    def is_it_admin(self, uid: str) -> bool: ...
    def get_wallet_amount(self) -> int: ...
    def generate_transaction_id(self) -> str: ...
    def show_online(self, comId: int) -> None: ...
    def check(self, args: Parameters, *can: Literal['admin', 'bot', 'agent', 'curator', 'leader', 'staff'], id_: str | None = None) -> bool: ...
    def check_all(self) -> None: ...
    def threadLaunch(self, comId: int, passive: bool = False) -> None: ...
    def launch(self, passive: bool = False) -> None: ...
    def single_launch(self, comId: int, passive: bool = False) -> None: ...
    def launch_events(self) -> None: ...
    def message_analyse(self, data: Event, category: CallbackCategory) -> None: ...
    def on_member_event(self, data: Event, category: CallbackCategory) -> None: ...
    def launch_text_message(self) -> None: ...
    def launch_other_message(self) -> None: ...
    def launch_all_message(self) -> None: ...
    def launch_delete_message(self) -> None: ...
    def launch_removed_message(self) -> None: ...
    def launch_on_member_join_chat(self) -> None: ...
    def launch_on_member_leave_chat(self) -> None: ...
    def launch_all_events(self) -> None: ...
