from typing import (
    Any,
    BinaryIO,
    Dict,
    List,
    Literal,
    Optional,
    Tuple,
    Union,
    overload
)
from aminofix import (  # type: ignore
    ACM,
    SubClient
)
from aminofix.lib.util.objects import (  # type: ignore
    AdminLogList,
    BlogCategoryList,
    BlogList,
    CommentList,
    CommunityList,
    CommunityStats,
    CommunityStickerCollection,
    GetBlogInfo,
    GetMessages,
    GetSharedFolderInfo,
    GetWikiInfo,
    InfluencerFans,
    InviteCode,
    InviteCodeList,
    JoinRequest,
    LiveLayer,
    LotteryLog,
    Message,
    NoticeList,
    NotificationList,
    QuizQuestionList,
    QuizRankings,
    RecentBlogs,
    SharedFolderFile,
    SharedFolderFileList,
    StickerCollection,
    Thread,
    ThreadList,
    TippedUsersSummary,
    UserAchievements,
    UserCheckIns,
    UserProfile,
    UserProfileCountList,
    UserProfileList,
    UserSavedBlogs,
    VcReputation,
    VisitorsList,
    WikiCategory,
    WikiCategoryList,
    WikiList,
    WikiRequestList
)
from .botamino import BotAmino

__all__ = ('Bot',)


class Bot(SubClient, ACM):  # type: ignore
    def __init__(
        self,
        client: BotAmino,
        community: Union[int, str],
        prefix: str = "!",
        bio: Optional[Union[List[str], str]] = None,
        activity: bool = False
    ) -> None:
        self.client: BotAmino
        self.smdevice_id: str
        self.prefix: str
        self.bio_contents: Optional[Union[List[str], str]]
        self.activity: bool
        self.marche: bool
        self.language: str
        self.community_amino_id: str
        self.community_id: int
        self.community_leader_agent_id: str
        self.community_name: str
        self.community_leaders: List[str]
        self.community_curators: List[str]
        self.community_staff: List[str]
        self.banned_words: List[str]
        self.locked_command: List[str]
        self.message_bvn: Optional[str]
        self.welcome_chat: Optional[str]
        self.favorite_users: List[str]
        self.favorite_chats: List[str]
        self.new_users: List[str]
        # fixed SubClient annotations
        self.comId: int
        self.certificatePath: Optional[str]
        self.device_id: str
        self.json: Dict[str, Any]
        self.proxies: Optional[Dict[str, str]]
        self.secret: Optional[str]
        self.sid: str
        self.userId: str
        self.account: UserProfile  # incorrect object (account not profile)
        self.profile: UserProfile
    def parse_headers(self, data: Optional[str] = None, type: Optional[str] = None) -> Dict[str, Any]: ...
    @property
    def community_filename(self) -> str: ...
    def create_community_file(self) -> None: ...
    def update_file(self, data: Optional[Dict[str, Any]] = None) -> None: ...
    def create_dict(self) -> Dict[str, Any]: ...
    def get_dict(self) -> Dict[str, Any]: ...
    @overload
    def get_file_info(self, key: Literal["prefix"]) -> str: ...
    @overload
    def get_file_info(self, key: Literal["welcome", "welcome_chat"]) -> Optional[str]: ...
    @overload
    def get_file_info(self, key: Literal["banned_words", "favorite_users", "favorite_chats", "locked_command"]) -> List[str]: ...
    def get_file_dict(self) -> Dict[str, Any]: ...
    def get_banned_words(self) -> List[str]: ...
    def set_prefix(self, prefix: str) -> None: ...
    def set_welcome_message(self, message: str) -> None: ...
    def set_welcome_chat(self, chatId: str) -> None: ...
    def add_favorite_users(self, value: Union[List[str], str]) -> None: ...
    def add_favorite_chats(self, value: Union[List[str], str]) -> None: ...
    def add_banned_words(self, words: Union[List[str], str]) -> None: ...
    def add_locked_command(self, commands: Union[List[str], str]) -> None: ...
    def remove_favorite_users(self, value: Union[List[str], str]) -> None: ...
    def remove_favorite_chats(self, value: Union[List[str], str]) -> None: ...
    def remove_banned_words(self, words: Union[List[str], str]) -> None: ...
    def remove_locked_command(self, commands: Union[List[str], str]) -> None: ...
    def unset_welcome_chat(self) -> None: ...
    def is_in_staff(self, uid: str) -> bool: ...
    def is_leader(self, uid: str) -> bool: ...
    def is_curator(self, uid: str) -> bool: ...
    def is_agent(self, uid: str) -> bool: ...
    def copy_bubble(self, chatId: str, replyId: str, comId: Optional[int] = None) -> None: ...
    @overload
    def accept_role(self, rid: str) -> bool: ...
    @overload
    def accept_role(self, rid: str, chatId: Optional[str]) -> bool: ...
    def get_staff(self, comIdOrAminoId: Union[int, str]) -> List[str]: ...
    def get_user_id(self, name_or_id: str) -> Optional[Tuple[str, str]]: ...
    def ask_all_members(self, message: str, lvl: int = 20, type_bool: Literal[1, 2, 3] = 1) -> None: ...
    def ask_amino_staff(self, message: str) -> None: ...
    def stop_instance(self) -> None: ...
    def start_instance(self) -> None: ...
    def leave_amino(self) -> None: ...
    def check_new_member(self) -> None: ...
    def welcome_new_member(self) -> None: ...
    def feature_chats(self) -> None: ...
    def feature_users(self) -> None: ...
    def update_bot_profile(self) -> None: ...
    def get_member_level(self, uid: str) -> int: ...
    def get_member_titles(self, uid: str) -> List[Dict[Literal['title', 'color'], str]]: ...
    def get_wallet_amount(self) -> int: ...
    def generate_transaction_id(self) -> str: ...
    @overload
    def pay(self, coins: int, *, blogId: str, transactionId: Optional[str] = None) -> None: ...
    @overload
    def pay(self, coins: int, *, chatId: Optional[str] = None, transactionId: Optional[str] = None) -> None: ...
    @overload
    def pay(self, coins: int, *, objectId: Optional[str] = None, transactionId: Optional[str] = None) -> None: ...
    @overload
    def favorite(self, time: Literal[1, 2, 3] = 1, *, userId: str) -> None: ...
    @overload
    def favorite(self, time: Literal[1, 2, 3] = 1, *, chatId: str) -> None: ...
    @overload
    def favorite(self, time: Literal[1, 2, 3] = 1, *, blogId: str) -> None: ...
    @overload
    def favorite(self, time: Literal[1, 2, 3] = 1, *, wikiId: str) -> None: ...
    @overload
    def unfavorite(self, *, userId: str) -> None: ...
    @overload
    def unfavorite(self, *, chatId: str) -> None: ...
    @overload
    def unfavorite(self, *, blogId: str) -> None: ...
    @overload
    def unfavorite(self, *, wikiId: str) -> None: ...
    @overload
    def join_chatroom(self, chat: str) -> bool: ...
    @overload
    def join_chatroom(self, *, chatId: str) -> bool: ...
    def start_screen_room(self, chatId: str, joinType: int = 1) -> None: ...
    def start_video_chat(self, chatId: str, joinType: int = 1) -> None: ...
    def start_voice_room(self, chatId: str, joinType: int = 1) -> None: ...
    def join_screen_room(self, chatId: str, joinType: int = 1) -> None: ...
    def get_chats(self, type: str = "recommended", start: int = 0, size: int = 250) -> ThreadList: ...
    def join_all_chat(self) -> None: ...
    def leave_all_chats(self) -> None: ...
    def follow_user(self, uid: Union[str, List[str]]) -> None: ...
    def unfollow_user(self, uid: str) -> None: ...
    def add_title(self, uid: str, title: str, color: Optional[str] = None) -> None: ...
    def remove_title(self, uid: str, title: str) -> None: ...
    def passive(self) -> None: ...
    # amino.fix stubs
    def get_invite_codes(self, status: str = "normal", start: int = 0, size: int = 25) -> InviteCodeList: ...
    def generate_invite_code(self, duration: int = 0, force: bool = True) -> InviteCode: ...
    def get_vip_users(self) -> UserProfileList: ...
    def delete_invite_code(self, inviteId: str) -> Literal[200]: ...
    def post_blog(
        self,
        title: str,
        content: str,
        imageList: Optional[List[BinaryIO]] = None,
        captionList: Optional[List[BinaryIO]] = None,
        categoriesList: Optional[List[str]] = None,
        backgroundColor: Optional[str] = None,
        fansOnly: bool = False,
        extensions: Optional[Dict[str, Any]] = None,
        crash: bool = False
    ) -> Literal[200]: ...
    def post_wiki(
        self,
        title: str,
        content: str,
        icon: Optional[str] = None,
        imageList: Optional[List[BinaryIO]] = None,
        keywords: Optional[str] = None,
        backgroundColor: Optional[str] = None,
        fansOnly: bool = False
    ) -> Literal[200]: ...
    def edit_blog(
        self,
        blogId: str,
        title: Optional[str] = None,
        content: Optional[str] = None,
        imageList: Optional[List[BinaryIO]] = None,
        categoriesList: Optional[List[str]] = None,
        backgroundColor: Optional[str] = None,
        fansOnly: bool = False
    ) -> Literal[200]: ...
    def delete_blog(self, blogId: str) -> Literal[200]: ...
    def delete_wiki(self, wikiId: str) -> Literal[200]: ...
    def repost_blog(self, content: Optional[str] = None, blogId: Optional[str] = None, wikiId: Optional[str] = None) -> Literal[200]: ...
    def check_in(self, tz: int = ...) -> Literal[200]: ...
    def repair_check_in(self, method: Literal[0, 1] = 0) -> Literal[200]: ...
    def lottery(self, tz: int = ...) -> LotteryLog: ...
    def edit_profile(
        self,
        nickname: Optional[str] = None,
        content: Optional[str] = None,
        icon: Optional[BinaryIO] = None,
        chatRequestPrivilege: Optional[str] = None,
        imageList: Optional[List[BinaryIO]] = None,
        captionList: Optional[Union[List[str], List[Optional[str]]]] = None,
        backgroundImage: Optional[str] = None,
        backgroundColor: Optional[str] = None,
        titles: Optional[List[str]] = None,
        colors: Optional[List[str]] = None,
        defaultBubbleId: Optional[str] = None
    ) -> Literal[200]: ...
    def vote_poll(self, blogId: str, optionId: str) -> Literal[200]: ...
    def comment(
        self,
        message: str,
        userId: Optional[str] = None,
        blogId: Optional[str] = None,
        wikiId: Optional[str] = None,
        replyTo: Optional[str] = None,
        isGuest: bool = False
    ) -> Literal[200]: ...
    def delete_comment(self, commentId: str, userId: Optional[str] = None, blogId: Optional[str] = None, wikiId: Optional[str] = None) -> Literal[200]: ...
    def like_blog(self, blogId: Optional[Union[List[str], str]] = None, wikiId: Optional[str] = None) -> Literal[200]: ...
    def unlike_blog(self, blogId: Optional[str] = None, wikiId: Optional[str] = None) -> Literal[200]: ...
    def like_comment(self, commentId: str, userId: Optional[str] = None, blogId: Optional[str] = None, wikiId: Optional[str] = None) -> Literal[200]: ...
    def unlike_comment(self, commentId: str, userId: Optional[str] = None, blogId: Optional[str] = None, wikiId: Optional[str] = None) -> Literal[200]: ...
    def upvote_comment(self, blogId: str, commentId: str) -> Literal[200]: ...
    def downvote_comment(self, blogId: str, commentId: str) -> Literal[200]: ...
    def unvote_comment(self, blogId: str, commentId: str) -> Literal[200]: ...
    def reply_wall(self, userId: str, commentId: str, message: str) -> Literal[200]: ...
    def send_active_obj(
        self,
        startTime: Optional[int] = None,
        endTime: Optional[int] = None,
        optInAdsFlags: int = 2147483647,
        tz: int = ...,
        timers: Optional[List[Dict[str, int]]] = None,
        timestamp: int = ...
    ) -> Literal[200]: ...
    def activity_status(self, status: Literal["on", "off"]) -> Literal[200]: ...
    def watch_ad(self) -> Literal[200]: ...
    def check_notifications(self) -> Literal[200]: ...
    def delete_notification(self, notificationId: str) -> Literal[200]: ...
    def clear_notifications(self) -> Literal[200]: ...
    def start_chat(
        self,
        userId: Union[List[str], str],
        message: str,
        title: Optional[str] = None,
        content: Optional[str] = None,
        isGlobal: bool = False,
        publishToGlobal: bool = False
    ) -> Thread: ...
    def invite_to_chat(self, userId: Union[List[str], str], chatId: str) -> Literal[200]: ...
    def add_to_favorites(self, userId: str) -> Literal[200]: ...
    def send_coins(
        self,
        coins: int,
        blogId: Optional[str] = None,
        chatId: Optional[str] = None,
        objectId: Optional[str] = None,
        transactionId: Optional[str] = None
    ) -> Literal[200]: ...
    def thank_tip(self, chatId: str, userId: str) -> Literal[200]: ...
    def follow(self, userId: Union[List[str], str]) -> Literal[200]: ...
    def unfollow(self, userId: str) -> Literal[200]: ...
    def block(self, userId: str) -> Literal[200]: ...
    def unblock(self, userId: str) -> Literal[200]: ...
    def visit(self, userId: str) -> Literal[200]: ...
    def flag(
        self,
        reason: str,
        flagType: int,
        userId: Optional[str] = None,
        blogId: Optional[str] = None,
        wikiId: Optional[str] = None,
        asGuest: bool = False
    ) -> Literal[200]: ...
    def send_message(
        self,
        chatId: str,
        message: Optional[str] = None,
        messageType: int = 0,
        file: Optional[BinaryIO] = None,
        fileType: Optional[Literal["audio", "image", "gif"]] = None,
        replyTo: Optional[str] = None,
        mentionUserIds: Optional[List[str]] = None,
        stickerId: Optional[str] = None,
        embedId: Optional[str] = None,
        embedType: Optional[int] = None,
        embedLink: Optional[str] = None,
        embedTitle: Optional[str] = None,
        embedContent: Optional[str] = None,
        embedImage: Optional[BinaryIO] = None
    ) -> Literal[200]: ...
    def full_embed(self, link: str, image: BinaryIO, message: str, chatId: str) -> Literal[200]: ...
    def delete_message(self, chatId: str, messageId: str, asStaff: bool = False, reason: Optional[str] = None) -> Literal[200]: ...
    def mark_as_read(self, chatId: str, messageId: str) -> Literal[200]: ...
    def edit_chat(
        self,
        chatId: str,
        doNotDisturb: Optional[bool] = None,
        pinChat: Optional[bool] = None,
        title: Optional[str] = None,
        icon: Optional[str] = None,
        backgroundImage: Optional[str] = None,
        content: Optional[str] = None,
        announcement: Optional[str] = None,
        coHosts: Optional[List[str]] = None,
        keywords: Optional[List[str]] = None,
        pinAnnouncement: Optional[bool] = None,
        publishToGlobal: Optional[bool] = None,
        canTip: Optional[bool] = None,
        viewOnly: Optional[bool] = None,
        canInvite: Optional[bool] = None,
        fansOnly: Optional[bool] = None
    ) -> List[Literal[200]]: ...
    def transfer_host(self, chatId: str, userIds: List[str]) -> Literal[200]: ...
    def transfer_organizer(self, chatId: str, userIds: List[str]) -> Literal[200]: ...
    def accept_host(self, chatId: str, requestId: str) -> Literal[200]: ...
    def accept_organizer(self, chatId: str, requestId: str) -> Literal[200]: ...
    def kick(self, userId: str, chatId: str, allowRejoin: bool = True) -> Literal[200]: ...
    def join_chat(self, chatId: str) -> Literal[200]: ...
    def leave_chat(self, chatId: str) -> Literal[200]: ...
    def delete_chat(self, chatId: str) -> Literal[200]: ...
    def subscribe(self, userId: str, autoRenew: bool = False, transactionId: Optional[str] = None) -> Literal[200]: ...
    def promotion(self, noticeId: str, type: str = "accept") -> Literal[200]: ...
    def play_quiz_raw(self, quizId: str, quizAnswerList: List[Dict[str, Any]], quizMode: Literal[0, 1] = 0) -> Literal[200]: ...
    def play_quiz(self, quizId: str, questionIdsList: List[str], answerIdsList: List[str], quizMode: Literal[0, 1] = 0) -> Literal[200]: ...
    def vc_permission(self, chatId: str, permission: Literal[1, 2, 3]) -> Literal[200]: ...
    def get_vc_reputation_info(self, chatId: str) -> VcReputation: ...
    def claim_vc_reputation(self, chatId: str) -> VcReputation: ...
    def get_all_users(
        self,
        type: Literal["banned", "featured", "recent", "curators", "leaders"] = "recent",
        start: int = 0,
        size: int = 25
    ) -> UserProfileCountList: ...
    def get_online_users(self, start: int = 0, size: int = 25) -> UserProfileCountList: ...
    def get_online_favorite_users(self, start: int = 0, size: int = 25) -> UserProfileCountList: ...
    def get_user_info(self, userId: str) -> UserProfile: ...
    def get_user_following(self, userId: str, start: int = 0, size: int = 25) -> UserProfileList: ...
    def get_user_followers(self, userId: str, start: int = 0, size: int = 25) -> UserProfileList: ...
    def get_user_visitors(self, userId: str, start: int = 0, size: int = 25) -> VisitorsList: ...
    def get_user_checkins(self, userId: str) -> UserCheckIns: ...
    def get_user_blogs(self, userId: str, start: int = 0, size: int = 25) -> BlogList: ...
    def get_user_wikis(self, userId: str, start: int = 0, size: int = 25) -> WikiList: ...
    def get_user_achievements(self, userId: str) -> UserAchievements: ...
    def get_influencer_fans(self, userId: str, start: int = 0, size: int = 25) -> InfluencerFans: ...
    def get_blocked_users(self, start: int = 0, size: int = 25) -> UserProfileList: ...
    def get_blocker_users(self, start: int = 0, size: int = 25) -> List[str]: ...
    def search_users(self, nickname: str, start: int = 0, size: int = 25) -> UserProfileList: ...
    def get_saved_blogs(self, start: int = 0, size: int = 25) -> UserSavedBlogs: ...
    def get_leaderboard_info(
        self,
        type: Literal["24", "hour", "7", "day", "rep", "check", "quiz"],
        start: int = 0,
        size: int = 25
    ) -> UserProfileList: ...
    def get_wiki_info(self, wikiId: str) -> GetWikiInfo: ...
    def get_recent_wiki_items(self, start: int = 0, size: int = 25) -> WikiList: ...
    def get_wiki_categories(self, start: int = 0, size: int = 25) -> WikiCategoryList: ...
    def get_wiki_category(self, categoryId: str, start: int = 0, size: int = 25) -> WikiCategory: ...
    def get_tipped_users(
        self,
        blogId: Optional[str] = None,
        wikiId: Optional[str] = None,
        quizId: Optional[str] = None,
        fileId: Optional[str] = None,
        chatId: Optional[str] = None,
        start: int = 0,
        size: int = 25
    ) -> TippedUsersSummary: ...
    def get_chat_threads(self, start: int = 0, size: int = 25) -> ThreadList: ...
    def get_public_chat_threads(self, type: str = "recommended", start: int = 0, size: int = 25) -> ThreadList: ...
    def get_chat_thread(self, chatId: str) -> Thread: ...
    def get_chat_messages(self, chatId: str, size: int = 25, pageToken: Optional[str] = None) -> GetMessages: ...
    def get_message_info(self, chatId: str, messageId: str) -> Message: ...
    @overload
    def get_blog_info(self, blogId: Optional[str] = None, *, quizId: Optional[str] = None) -> GetBlogInfo: ...
    @overload
    def get_blog_info(self, *, wikiId: str) -> GetWikiInfo: ...
    @overload
    def get_blog_info(self, *, fileId: str) -> SharedFolderFile: ...
    @overload
    def get_blog_info(
        self,
        blogId: Optional[str] = None,
        wikiId: Optional[str] = None,
        quizId: Optional[str] = None,
        fileId: Optional[str] = None
    ) -> Union[GetBlogInfo, GetWikiInfo, SharedFolderFile]: ...
    def get_blog_comments(
        self,
        blogId: Optional[str] = None,
        wikiId: Optional[str] = None,
        quizId: Optional[str] = None,
        fileId: Optional[str] = None,
        sorting: Literal["newest", "oldest", "top"] = "newest",
        start: int = 0,
        size: int = 25
    ) -> CommentList: ...
    def get_blog_categories(self, size: int = 25) -> BlogCategoryList: ...
    def get_blogs_by_category(self, categoryId: str,start: int = 0, size: int = 25) -> BlogList: ...
    def get_quiz_rankings(self, quizId: str, start: int = 0, size: int = 25) -> QuizRankings: ...
    def get_wall_comments(
        self,
        userId: str,
        sorting: Literal["newest", "oldest", "top"],
        start: int = 0,
        size: int = 25
    ) -> CommentList: ...
    def get_recent_blogs(self, pageToken: Optional[str] = None, start: int = 0, size: int = 25) -> RecentBlogs: ...
    def get_chat_users(self, chatId: str, start: int = 0, size: int = 25) -> UserProfileList: ...
    def get_notifications(self, start: int = 0, size: int = 25) -> NotificationList: ...
    def get_notices(self, start: int = 0, size: int = 25) -> NoticeList: ...
    def get_sticker_pack_info(self, sticker_pack_id: str) -> StickerCollection: ...
    def get_sticker_packs(self) -> StickerCollection: ...
    def get_store_chat_bubbles(self, start: int = 0, size: int = 25) -> Dict[str, Any]: ...
    def get_store_stickers(self, start: int = 0, size: int = 25) -> Dict[str, Any]: ...
    def get_community_stickers(self) -> CommunityStickerCollection: ...
    def get_sticker_collection(self, collectionId: str) -> StickerCollection: ...
    def get_shared_folder_info(self) -> GetSharedFolderInfo: ...
    def get_shared_folder_files(self, type: str = "latest", start: int = 0, size: int = 25) -> SharedFolderFileList: ...
    def moderation_history(
        self,
        userId: Optional[str] = None,
        blogId: Optional[str] = None,
        wikiId: Optional[str] = None,
        quizId: Optional[str] = None,
        fileId: Optional[str] = None,
        size: int = 25
    ) -> AdminLogList: ...
    @overload
    def feature(
        self,
        time: Literal[3600, 7200, 10800],
        *,
        chatId: str
    ) -> Dict[str, Any]: ...
    @overload
    def feature(
        self,
        time: Literal[1, 2, 3],
        userId: Optional[str] = None,
        chatId: Optional[str] = None,
        blogId: Optional[str] = None,
        wikiId: Optional[str] = None
    ) -> Dict[str, Any]: ...
    def unfeature(
        self,
        userId: Optional[str] = None,
        chatId: Optional[str] = None,
        blogId: Optional[str] = None,
        wikiId: Optional[str] = None
    ) -> Dict[str, Any]: ...
    def hide(
        self,
        userId: Optional[str] = None,
        chatId: Optional[str] = None,
        blogId: Optional[str] = None,
        wikiId: Optional[str] = None,
        quizId: Optional[str] = None,
        fileId: Optional[str] = None,
        reason: Optional[str] = None
    ) -> Dict[str, Any]: ...
    def unhide(
        self,
        userId: Optional[str] = None,
        chatId: Optional[str] = None,
        blogId: Optional[str] = None,
        wikiId: Optional[str] = None,
        quizId: Optional[str] = None,
        fileId: Optional[str] = None,
        reason: Optional[str] = None
    ) -> Dict[str, Any]: ...
    def edit_titles(self, userId: str, titles: List[str], colors: Union[List[str], List[Optional[str]]]) -> Dict[str, Any]: ...
    def warn(self, userId: str, reason: Optional[str] = None) -> Dict[str, Any]: ...
    def strike(self, userId: str, time: Literal[1, 2, 3, 4, 5], title: Optional[str] = None, reason: Optional[str] = None) -> Dict[str, Any]: ...
    def ban(self, userId: str, reason: str, banType: Optional[int] = None) -> Dict[str, Any]: ...
    def unban(self, userId: str, reason: str) -> Dict[str, Any]: ...
    def reorder_featured_users(self, userIds: List[str]) -> Dict[str, Any]: ...
    def get_hidden_blogs(self, start: int = 0, size: int = 25) -> BlogList: ...
    def get_featured_users(self, start: int = 0, size: int = 25) -> UserProfileCountList: ...
    def review_quiz_questions(self, quizId: str) -> QuizQuestionList: ...
    def get_recent_quiz(self, start: int = 0, size: int = 25) -> BlogList: ...
    def get_trending_quiz(self, start: int = 0, size: int = 25) -> BlogList: ...
    def get_best_quiz(self, start: int = 0, size: int = 25) -> BlogList: ...
    def send_action(self, actions: List[str], blogId: Optional[str] = None, quizId: Optional[str] = None, lastAction: bool = False) -> None: ...
    def purchase(self, objectId: str, objectType: int, aminoPlus: bool = True, autoRenew: bool = False) -> Literal[200]: ...
    def apply_avatar_frame(self, avatarId: str, applyToAll: bool = True) -> Literal[200]: ...
    def invite_to_vc(self, chatId: str, userId: str) -> Literal[200]: ...
    def add_poll_option(self, blogId: str, question: str) -> Literal[200]: ...
    def create_wiki_category(self, title: str, parentCategoryId: str, content: Optional[str] = None) -> Literal[200]: ...
    def create_shared_folder(self, title: str) -> Literal[200]: ...
    def submit_to_wiki(self, wikiId: str, message: str) -> Literal[200]: ...
    def accept_wiki_request(self, requestId: str, destinationCategoryIdList: List[str]) -> Literal[200]: ...
    def reject_wiki_request(self, requestId: str) -> Literal[200]: ...
    def get_wiki_submissions(self, start: int = 0, size: int = 25) -> WikiRequestList: ...
    def get_live_layer(self) -> LiveLayer: ...
    def apply_bubble(self, bubbleId: str, chatId: str, applyToAll: bool = False) -> Literal[200]: ...
    # ACM stubs
    def create_community(self, name: str, tagline: str, icon: BinaryIO, themeColor: str, joinType: Literal[1, 2, 3], primaryLanguage: str = "en") -> Literal[200]: ...
    def delete_community(self, email: str, password: str, verificationCode: str) -> Literal[200]: ...
    def list_communities(self, start: int = 0, size: int = 25) -> CommunityList: ...
    def get_categories(self, start: int = 0, size: int = 25) -> Dict[str, Any]: ...
    def change_sidepanel_color(self, color: str) -> Dict[str, Any]: ...
    def upload_themepack_raw(self, file: BinaryIO) -> Dict[str, Any]: ...
    def promote(self, userId: str, rank: Literal["agent", "curator", "leader"]) -> Literal[200]: ...
    def get_join_requests(self, start: int = 0, size: int = 25) -> JoinRequest: ...
    def accept_join_request(self, userId: str) -> Literal[200]: ...
    def reject_join_request(self, userId: str) -> Literal[200]: ...
    def get_community_stats(self) -> CommunityStats: ...
    def get_community_user_stats(self, type: Literal["curator", "leader"], start: int = 0, size: int = 25) -> UserProfileList: ...
    def change_welcome_message(self, message: str, isEnabled: bool = True) -> Literal[200]: ...
    def change_guidelines(self, message: str) -> Literal[200]: ...
    def edit_community(
        self,
        name: Optional[str] = None,
        description: Optional[str] = None,
        aminoId: Optional[str] = None,
        primaryLanguage: Optional[str] = None,
        themePackUrl: Optional[str] = None
    ) -> Literal[200]: ...
    def change_module(
        self,
        module: Literal["catalog", "chat", "externalcontent", "featured", "featuredchats", "featuredposts", "featuredusers", "influencer", "leaderboards", "livechat", "posts", "publicchats", "ranking", "screeningroom", "sharedfolder", "topiccategories"],
        isEnabled: bool
    ) -> Literal[200]: ...
    def add_influencer(self, userId: str, monthlyFee: int) -> Literal[200]: ...
    def remove_influencer(self, userId: str) -> Literal[200]: ...
    def get_notice_list(self, start: int = 0, size: int = 25) -> NoticeList: ...
    def delete_pending_role(self, noticeId: str) -> Literal[200]: ...
