from typing import (
    Any,
    BinaryIO,
    Literal,
    Sized,
    overload
)
from websocket import WebSocketApp
from .client import Client
from .lib.util import (
    AdminLogList,
    BlogCategoryList,
    BlogList,
    CommentList,
    Community,
    CommunityStickerCollection,
    GetBlogInfo,
    GetMessages,
    GetSharedFolderInfo,
    GetWikiInfo,
    InfluencerFans,
    InviteCode,
    InviteCodeList,
    LiveLayer,
    LotteryLog,
    Message,
    NoticeList,
    NotificationList,
    QuizQuestionList,
    QuizRankings,
    RecentBlogs,
    SharedFolderFile,
    SharedFolderFileList,
    StickerCollection,
    Thread,
    ThreadList,
    TippedUsersSummary,
    UserAchievements,
    UserCheckIns,
    UserProfile,
    UserProfileCountList,
    UserProfileList,
    UserSavedBlogs,
    VcReputation,
    VisitorsList,
    WikiCategory,
    WikiCategoryList,
    WikiList,
    WikiRequestList
)

__all__ = ("SubClient",)

class VCHeaders:
    def __init__(self, data: Sized | None = None) -> None:
        self.vc_headers: dict[str, str]

class SubClient(Client):
    @overload
    def __init__(
        self,
        comId: int,
        *,
        client: Client,
        deviceId: str | None = None,
        autoDevice: bool = False,
        proxies: dict[str, str] | None = None,
        certificatePath: str | None = None
    ) -> None: ...
    @overload
    def __init__(
        self,
        *,
        aminoId: str,
        client: Client,
        deviceId: str | None = None,
        autoDevice: bool = False,
        proxies: dict[str, str] | None = None,
        certificatePath: str | None = None
    ) -> None: ...
    @overload
    def __init__(
        self,
        comId: int | None = None,
        aminoId: str | None = None,
        *,
        client: Client,
        deviceId: str | None = None,
        autoDevice: bool = False,
        proxies: dict[str, str] | None = None,
        certificatePath: str | None = None
    ) -> None:
        self.vc_connect: bool
        self.comId: int
        self.community: Community
        self.sid: str
        self.userId: str
        self.socket: WebSocketApp
        self.client: Client
    def get_invite_codes(self, status: str = "normal", start: int = 0, size: int = 25) -> InviteCodeList: ...
    def generate_invite_code(self, duration: int = 0, force: bool = True) -> InviteCode: ...
    def get_vip_users(self, start: int = 0, size: int = 25) -> UserProfileList: ...
    def delete_invite_code(self, inviteId: str) -> Literal[200]: ...
    def post_blog(
        self,
        title: str,
        content: str,
        imageList: list[BinaryIO | bytes | str] | None = None,
        captionList: list[str] | None = None,
        categoriesList: list[str] | None = None,
        backgroundColor: str | None = None,
        fansOnly: bool = False,
        extensions: dict[str, Any] | None = None
    ) -> Literal[200]: ...
    def post_wiki(
        self,
        title: str,
        content: str,
        icon: str | None = None,
        imageList: list[BinaryIO | bytes | str] | None = None,
        keywords: str | None = None,
        backgroundColor: str | None = None,
        fansOnly: bool = False
    ) -> Literal[200]: ...
    def edit_blog(
        self,
        blogId: str,
        title: str | None = None,
        content: str | None = None,
        imageList: list[BinaryIO | bytes | str] | None = None,
        categoriesList: list[str] | None = None,
        backgroundColor: str | None = None,
        fansOnly: bool = False
    ) -> Literal[200]: ...
    def delete_blog(self, blogId: str) -> Literal[200]: ...
    def delete_wiki(self, wikiId: str) -> Literal[200]: ...
    @overload
    def repost_blog(self, content: str | None, blogId: str) -> Literal[200]: ...
    @overload
    def repost_blog(self, content: str | None = None, *, blogId: str) -> Literal[200]: ...
    @overload
    def repost_blog(self, content: str | None = None, *, wikiId: str) -> Literal[200]: ...
    @overload
    def repost_blog(self, content: str | None = None, blogId: str | None = None, wikiId: str | None = None) -> Literal[200]: ...
    def check_in(self, tz: int = ...) -> Literal[200]: ...
    def repair_check_in(self, method: Literal[0, 1] = 0) -> Literal[200]: ...
    def lottery(self, tz: int = ...) -> LotteryLog: ...
    def edit_profile(
        self,
        nickname: str | None = None,
        content: str | None = None,
        icon: BinaryIO | bytes | str | None = None,
        backgroundColor: str | None = None,
        backgroundImage: str | None = None,
        defaultBubbleId: str | None = None,
        chatRequestPrivilege: str | None = None,
        imageList: list[BinaryIO | bytes | str] | None = None,
        captionList: list[str | None] | None = None,
        titles: list[str] | None = None,
        colors: list[str] | None = None
    ) -> Literal[200]: ...
    def vote_poll(self, blogId: str, optionId: str) -> Literal[200]: ...
    @overload
    def comment(self, message: str, userId: str, *, replyTo: str | None = None, isGuest: bool = False) -> Literal[200]: ...
    @overload
    def comment(self, message: str, *, blogId: str, replyTo: str | None = None, isGuest: bool = False) -> Literal[200]: ...
    @overload
    def comment(self, message: str, *, wikiId: str, replyTo: str | None = None, isGuest: bool = False) -> Literal[200]: ...
    @overload
    def comment(self, message: str, userId: str | None = None, blogId: str | None = None, wikiId: str | None = None, replyTo: str | None = None, isGuest: bool = False) -> Literal[200]: ...
    @overload
    def delete_comment(self, commentId: str, userId: str) -> Literal[200]: ...
    @overload
    def delete_comment(self, commentId: str, *, blogId: str) -> Literal[200]: ...
    @overload
    def delete_comment(self, commentId: str, *, wikiId: str) -> Literal[200]: ...
    @overload
    def delete_comment(self, commentId: str, userId: str | None = None, blogId: str | None = None, wikiId: str | None = None) -> Literal[200]: ...
    @overload
    def like_blog(self, blogId: list[str] | str) -> Literal[200]: ...
    @overload
    def like_blog(self, *, wikiId: str) -> Literal[200]: ...
    @overload
    def like_blog(self, blogId: list[str] | str | None = None, wikiId: str | None = None) -> Literal[200]: ...
    @overload
    def unlike_blog(self, blogId: str) -> Literal[200]: ...
    @overload
    def unlike_blog(self, *, wikiId: str) -> Literal[200]: ...
    @overload
    def unlike_blog(self, blogId: str | None = None, wikiId: str | None = None) -> Literal[200]: ...
    @overload
    def like_comment(self, commentId: str, userId: str) -> Literal[200]: ...
    @overload
    def like_comment(self, commentId: str, *, blogId: str) -> Literal[200]: ...
    @overload
    def like_comment(self, commentId: str, *, wikiId: str) -> Literal[200]: ...
    @overload
    def like_comment(self, commentId: str, userId: str | None = None, blogId: str | None = None, wikiId: str | None = None) -> Literal[200]: ...
    @overload
    def unlike_comment(self, commentId: str, userId: str) -> Literal[200]: ...
    @overload
    def unlike_comment(self, commentId: str, *, blogId: str) -> Literal[200]: ...
    @overload
    def unlike_comment(self, commentId: str, *, wikiId: str) -> Literal[200]: ...
    @overload
    def unlike_comment(self, commentId: str, userId: str | None = None, blogId: str | None = None, wikiId: str | None = None) -> Literal[200]: ...
    def upvote_comment(self, blogId: str, commentId: str) -> Literal[200]: ...
    def downvote_comment(self, blogId: str, commentId: str) -> Literal[200]: ...
    def unvote_comment(self, blogId: str, commentId: str) -> Literal[200]: ...
    def reply_wall(self, userId: str, commentId: str, message: str) -> Literal[200]: ...
    @overload
    def send_active_obj(
        self,
        startTime: int,
        endTime: int,
        optInAdsFlags: int = 2147483647,
        tz: int = ...,
        *,
        timestamp: int | None = None
    ) -> Literal[200]: ...
    @overload
    def send_active_obj(
        self,
        *,
        optInAdsFlags: int = 2147483647,
        tz: int = ...,
        timers: list[dict[str, int]],
        timestamp: int | None = None
    ) -> Literal[200]: ...
    @overload
    def send_active_obj(
        self,
        startTime: int | None = None,
        endTime: int | None = None,
        optInAdsFlags: int = 2147483647,
        tz: int = ...,
        timers: list[dict[str, int]] | None = None,
        timestamp: int | None = None
    ) -> Literal[200]: ...
    def activity_status(self, status: Literal["on", "off"]) -> Literal[200]: ...
    def watch_ad(self) -> Literal[200]: ...
    def check_notifications(self) -> Literal[200]: ...
    def delete_notification(self, notificationId: str) -> Literal[200]: ...
    def clear_notifications(self) -> Literal[200]: ...
    def start_chat(
        self,
        userId: list[str] | str,
        message: str,
        title: str | None = None,
        content: str | None = None,
        isGlobal: bool = False,
        publishToGlobal: bool = False
    ) -> Thread: ...
    def invite_to_chat(self, userId: list[str] | str, chatId: str) -> Literal[200]: ...
    def add_to_favorites(self, userId: str) -> Literal[200]: ...
    def send_coins(
        self,
        coins: int,
        blogId: str | None = None,
        chatId: str | None = None,
        objectId: str | None = None,
        transactionId: str | None = None
    ) -> Literal[200]: ...
    def thank_tip(self, chatId: str, userId: str) -> Literal[200]: ...
    def follow(self, userId: list[str] | str) -> Literal[200]: ...
    def unfollow(self, userId: str) -> Literal[200]: ...
    def block(self, userId: str) -> Literal[200]: ...
    def unblock(self, userId: str) -> Literal[200]: ...
    def visit(self, userId: str) -> Literal[200]: ...
    @overload
    def flag(self, reason: str, flagType: int, userId: str, *, asGuest: bool = False) -> Literal[200]: ...
    @overload
    def flag(self, reason: str, flagType: int, *, blogId: str, asGuest: bool = False) -> Literal[200]: ...
    @overload
    def flag(self, reason: str, flagType: int, *, wikiId: str, asGuest: bool = False) -> Literal[200]: ...
    @overload
    def flag(self, reason: str, flagType: int, userId: str | None = None, blogId: str | None = None, wikiId: str | None = None, asGuest: bool = False) -> Literal[200]: ...
    def send_message(
        self,
        chatId: str,
        message: str | None = None,
        messageType: int = 0,
        file: BinaryIO | bytes | str | None = None,
        fileType: Literal["audio", "image", "gif"] | None = None,
        replyTo: str | None = None,
        mentionUserIds: list[str] | None = None,
        stickerId: str | None = None,
        embedId: str | None = None,
        embedType: int | None = None,
        embedLink: str | None = None,
        embedTitle: str | None = None,
        embedContent: str | None = None,
        embedImage: BinaryIO | bytes | str | None = None
    ) -> Literal[200]: ...
    def full_embed(self, link: str, image: BinaryIO | bytes | str, message: str, chatId: str) -> Literal[200]: ...
    def delete_message(self, chatId: str, messageId: str, asStaff: bool = False, reason: str | None = None) -> Literal[200]: ...
    def mark_as_read(self, chatId: str, messageId: str) -> Literal[200]: ...
    def edit_chat(
        self,
        chatId: str,
        doNotDisturb: bool | None = None,
        pinChat: bool | None = None,
        title: str | None = None,
        icon: str | None = None,
        backgroundImage: str | None = None,
        content: str | None = None,
        announcement: str | None = None,
        coHosts: list[str] | None = None,
        keywords: list[str] | None = None,
        pinAnnouncement: bool | None = None,
        publishToGlobal: bool | None = None,
        canTip: bool | None = None,
        viewOnly: bool | None = None,
        canInvite: bool | None = None,
        fansOnly: bool | None = None
    ) -> list[Literal[200]]: ...
    def transfer_host(self, chatId: str, userIds: list[str]) -> Literal[200]: ...
    def transfer_organizer(self, chatId: str, userIds: list[str]) -> Literal[200]: ...
    def accept_host(self, chatId: str, requestId: str) -> Literal[200]: ...
    def accept_organizer(self, chatId: str, requestId: str) -> Literal[200]: ...
    def kick(self, userId: str, chatId: str, allowRejoin: bool = True) -> Literal[200]: ...
    def join_chat(self, chatId: str) -> Literal[200]: ...
    def leave_chat(self, chatId: str) -> Literal[200]: ...
    def delete_chat(self, chatId: str) -> Literal[200]: ...
    def subscribe(self, userId: str, autoRenew: bool = False, transactionId: str | None = None) -> Literal[200]: ...
    def promotion(self, noticeId: str, type: str = "accept") -> Literal[200]: ...
    def play_quiz_raw(self, quizId: str, quizAnswerList: list[dict[str, Any]], quizMode: Literal[0, 1] = 0) -> Literal[200]: ...
    def play_quiz(self, quizId: str, questionIdsList: list[str], answerIdsList: list[str], quizMode: Literal[0, 1] = 0) -> Literal[200]: ...
    def vc_permission(self, chatId: str, permission: Literal[1, 2, 3]) -> Literal[200]: ...
    def get_vc_reputation_info(self, chatId: str) -> VcReputation: ...
    def claim_vc_reputation(self, chatId: str) -> VcReputation: ...
    def get_all_users(
        self,
        type: Literal["online", "recent", "banned", "featured", "curators", "leaders"] = "recent",
        start: int = 0,
        size: int = 25
    ) -> UserProfileCountList: ...
    def get_online_users(self, start: int = 0, size: int = 25) -> UserProfileCountList: ...
    def get_online_favorite_users(self, start: int = 0, size: int = 25) -> UserProfileCountList: ...
    def get_user_info(self, userId: str) -> UserProfile: ...
    def get_user_following(self, userId: str, start: int = 0, size: int = 25) -> UserProfileList: ...
    def get_user_followers(self, userId: str, start: int = 0, size: int = 25) -> UserProfileList: ...
    def get_user_visitors(self, userId: str, start: int = 0, size: int = 25) -> VisitorsList: ...
    def get_user_checkins(self, userId: str) -> UserCheckIns: ...
    def get_user_blogs(self, userId: str, start: int = 0, size: int = 25) -> BlogList: ...
    def get_user_wikis(self, userId: str, start: int = 0, size: int = 25) -> WikiList: ...
    def get_user_achievements(self, userId: str) -> UserAchievements: ...
    def get_influencer_fans(self, userId: str, start: int = 0, size: int = 25) -> InfluencerFans: ...
    def get_blocked_users(self, start: int = 0, size: int = 25) -> UserProfileList: ...
    def get_blocker_users(self, start: int = 0, size: int = 25) -> list[str]: ...
    def search_users(self, nickname: str, start: int = 0, size: int = 25) -> UserProfileList: ...
    def get_saved_blogs(self, start: int = 0, size: int = 25) -> UserSavedBlogs: ...
    def get_leaderboard_info(
        self,
        type: Literal["24", "hour", "7", "day", "rep", "check", "quiz"],
        start: int = 0,
        size: int = 25
    ) -> UserProfileList: ...
    def get_wiki_info(self, wikiId: str) -> GetWikiInfo: ...
    def get_recent_wiki_items(self, start: int = 0, size: int = 25) -> WikiList: ...
    def get_wiki_categories(self, start: int = 0, size: int = 25) -> WikiCategoryList: ...
    def get_wiki_category(self, categoryId: str, start: int = 0, size: int = 25) -> WikiCategory: ...
    def get_tipped_users(
        self,
        blogId: str | None = None,
        wikiId: str | None = None,
        quizId: str | None = None,
        fileId: str | None = None,
        chatId: str | None = None,
        start: int = 0,
        size: int = 25
    ) -> TippedUsersSummary: ...
    def get_chat_threads(self, start: int = 0, size: int = 25) -> ThreadList: ...
    def get_public_chat_threads(self, type: str = "recommended", start: int = 0, size: int = 25) -> ThreadList: ...
    def get_chat_thread(self, chatId: str) -> Thread: ...
    def get_chat_messages(self, chatId: str, size: int = 25, pageToken: str | None = None) -> GetMessages: ...
    def get_message_info(self, chatId: str, messageId: str) -> Message: ...
    @overload
    def get_blog_info(self, blogId: str | None = None, *, quizId: str | None = None) -> GetBlogInfo: ...
    @overload
    def get_blog_info(self, *, wikiId: str) -> GetWikiInfo: ...
    @overload
    def get_blog_info(self, *, fileId: str) -> SharedFolderFile: ...
    @overload
    def get_blog_info(
        self,
        blogId: str | None = None,
        wikiId: str | None = None,
        quizId: str | None = None,
        fileId: str | None = None
    ) -> GetBlogInfo | GetWikiInfo | SharedFolderFile: ...
    @overload
    def get_blog_comments(
        self,
        blogId: str,
        *,
        sorting: Literal["newest", "oldest", "top"] = "newest",
        start: int = 0,
        size: int = 25
    ) -> CommentList: ...
    @overload
    def get_blog_comments(
        self,
        *,
        wikiId: str,
        sorting: Literal["newest", "oldest", "top"] = "newest",
        start: int = 0,
        size: int = 25
    ) -> CommentList: ...
    @overload
    def get_blog_comments(
        self,
        *,
        quizId: str,
        fileId: str | None = None,
        sorting: Literal["newest", "oldest", "top"] = "newest",
        start: int = 0,
        size: int = 25
    ) -> CommentList: ...
    @overload
    def get_blog_comments(
        self,
        *,
        fileId: str | None = None,
        sorting: Literal["newest", "oldest", "top"] = "newest",
        start: int = 0,
        size: int = 25
    ) -> CommentList: ...
    @overload
    def get_blog_comments(
        self,
        blogId: str | None = None,
        wikiId: str | None = None,
        quizId: str | None = None,
        fileId: str | None = None,
        sorting: Literal["newest", "oldest", "top"] = "newest",
        start: int = 0,
        size: int = 25
    ) -> CommentList: ...
    def get_blog_categories(self, size: int = 25) -> BlogCategoryList: ...
    def get_blogs_by_category(self, categoryId: str,start: int = 0, size: int = 25) -> BlogList: ...
    def get_quiz_rankings(self, quizId: str, start: int = 0, size: int = 25) -> QuizRankings: ...
    def get_wall_comments(
        self,
        userId: str,
        sorting: Literal["newest", "oldest", "top"],
        start: int = 0,
        size: int = 25
    ) -> CommentList: ...
    def get_recent_blogs(self, pageToken: str | None = None, start: int = 0, size: int = 25) -> RecentBlogs: ...
    def get_chat_users(self, chatId: str, start: int = 0, size: int = 25) -> UserProfileList: ...
    def get_notifications(self, start: int = 0, size: int = 25) -> NotificationList: ...
    def get_notices(self, start: int = 0, size: int = 25) -> NoticeList: ...
    def get_sticker_pack_info(self, sticker_pack_id: str) -> StickerCollection: ...
    def get_sticker_packs(self, start: int = 0, size: int = 25) -> StickerCollection: ...
    def get_store_chat_bubbles(self, start: int = 0, size: int = 25) -> dict[str, Any]: ...
    def get_store_stickers(self, start: int = 0, size: int = 25) -> dict[str, Any]: ...
    def get_community_stickers(self, start: int = 0, size: int = 25) -> CommunityStickerCollection: ...
    def get_sticker_collection(self, collectionId: str) -> StickerCollection: ...
    def get_shared_folder_info(self) -> GetSharedFolderInfo: ...
    def get_shared_folder_files(self, type: str = "latest", start: int = 0, size: int = 25) -> SharedFolderFileList: ...
    def moderation_history(
        self,
        userId: str | None = None,
        blogId: str | None = None,
        wikiId: str | None = None,
        quizId: str | None = None,
        fileId: str | None = None,
        start: int = 0,
        size: int = 25
    ) -> AdminLogList: ...
    @overload
    def feature(
        self,
        time: Literal[3600, 7200, 10800],
        *,
        chatId: str
    ) -> dict[str, Any]: ...
    @overload
    def feature(
        self,
        time: Literal[1, 2, 3],
        userId: str | None = None,
        chatId: str | None = None,
        blogId: str | None = None,
        wikiId: str | None = None
    ) -> dict[str, Any]: ...
    def unfeature(
        self,
        userId: str | None = None,
        chatId: str | None = None,
        blogId: str | None = None,
        wikiId: str | None = None
    ) -> dict[str, Any]: ...
    def hide(
        self,
        userId: str | None = None,
        chatId: str | None = None,
        blogId: str | None = None,
        wikiId: str | None = None,
        quizId: str | None = None,
        fileId: str | None = None,
        reason: str | None = None
    ) -> dict[str, Any]: ...
    def unhide(
        self,
        userId: str | None = None,
        chatId: str | None = None,
        blogId: str | None = None,
        wikiId: str | None = None,
        quizId: str | None = None,
        fileId: str | None = None,
        reason: str | None = None
    ) -> dict[str, Any]: ...
    def edit_titles(self, userId: str, titles: list[str], colors: list[str | None]) -> dict[str, Any]: ...
    def warn(self, userId: str, reason: str | None = None) -> dict[str, Any]: ...
    def strike(self, userId: str, duration: Literal[1, 2, 3, 4, 5], title: str | None = None, reason: str | None = None) -> dict[str, Any]: ...
    def ban(self, userId: str, reason: str, banType: int | None = None) -> dict[str, Any]: ...
    def unban(self, userId: str, reason: str) -> dict[str, Any]: ...
    def reorder_featured_users(self, userIds: list[str]) -> dict[str, Any]: ...
    def get_hidden_blogs(self, start: int = 0, size: int = 25) -> BlogList: ...
    def get_featured_users(self, start: int = 0, size: int = 25) -> UserProfileCountList: ...
    def review_quiz_questions(self, quizId: str) -> QuizQuestionList: ...
    def get_recent_quiz(self, start: int = 0, size: int = 25) -> BlogList: ...
    def get_trending_quiz(self, start: int = 0, size: int = 25) -> BlogList: ...
    def get_best_quiz(self, start: int = 0, size: int = 25) -> BlogList: ...
    def send_action(self, actions: list[str], blogId: str | None = None, quizId: str | None = None, lastAction: bool = False) -> None: ...
    def purchase(self, objectId: str, objectType: int, autoRenew: bool = False, aminoPlus: bool = True) -> Literal[200]: ...
    def apply_avatar_frame(self, avatarId: str, applyToAll: bool = True) -> Literal[200]: ...
    def invite_to_vc(self, chatId: str, userId: str) -> Literal[200]: ...
    def add_poll_option(self, blogId: str, question: str) -> Literal[200]: ...
    def create_wiki_category(self, title: str, parentCategoryId: str, content: str | None = None) -> Literal[200]: ...
    def create_shared_folder(self, title: str) -> Literal[200]: ...
    def submit_to_wiki(self, wikiId: str, message: str) -> Literal[200]: ...
    def accept_wiki_request(self, requestId: str, destinationCategoryIdList: list[str]) -> Literal[200]: ...
    def reject_wiki_request(self, requestId: str) -> Literal[200]: ...
    def get_wiki_submissions(self, start: int = 0, size: int = 25) -> WikiRequestList: ...
    def get_live_layer(self) -> LiveLayer: ...
    def apply_bubble(self, bubbleId: str, chatId: str, applyToAll: bool = False) -> Literal[200]: ...
