from typing import Any, BinaryIO, Literal, overload
from _typeshed import Incomplete

from requests import Session

from .socket import Callbacks, SocketHandler
from .lib.util import (
    BlogList,
    CommentList,
    Community,
    CommunityList,
    FromCode,
    GetBlogInfo,
    GetMessages,
    GetWikiInfo,
    Membership,
    Message,
    SharedFolderFile,
    Thread,
    ThreadList,
    UserProfile,
    UserProfileCountList,
    UserProfileList,
    VisitorsList,
    WalletHistory,
    WalletInfo
)

__all__ = ("Client",)

class Client(Callbacks, SocketHandler):
    def __init__(
        self,
        deviceId: str | None = None,
        userAgent: str = "Apple iPhone13,4 iOS v15.6.1 Main/3.12.9",
        proxies: dict[str, str] | None = None,
        certificatePath: str | None = None,
        socket_trace: bool = False,
        socketDebugging: bool = False,
        socket_enabled: bool = True,
        autoDevice: bool = False
    ) -> None:
        self.api: str
        self.authenticated: bool
        self.configured: bool
        self.session: Session
        self.autoDevice: bool
        self.device_id: str
        self.socket_enabled: bool
        self.proxies: dict[str, str] | None
        self.certificatePath: str | None
        self.json: Incomplete | None
        self.sid = None
        self.userId = None
        self.account: UserProfile
        self.profile: UserProfile
        self.secret: str | None
        self.active_live_chats: list[str] = []
        self.stop_loop: bool
    def parse_headers(self, data: str | None = None, type: str | None = None) -> dict[str, str]: ...
    def join_voice_chat(self, comId: int, chatId: str, joinType: int = 1) -> None: ...
    def join_video_chat(self, comId: int, chatId: str, joinType: int = 1) -> None: ...
    def join_video_chat_as_viewer(self, comId: int, chatId: str) -> None: ...
    def leave_from_live_chat(self, chatId: str) -> None: ...
    def run_vc(self, comId: int, chatId: str, joinType: int) -> None: ...
    def start_vc(self, comId: int, chatId: str, joinType: int = 1) -> None: ...
    def end_vc(self, comId: int, chatId: str, joinType: int = 2) -> None: ...
    def login_sid(self, SID: str) -> None: ...
    def login(self, email: str, password: str) -> dict[str, Any]: ...
    def login_phone(self, phoneNumber: str, password: str) -> dict[str, Any]: ...
    def login_secret(self, secret: str) -> dict[str, Any]: ...
    def register(
        self,
        nickname: str,
        email: str,
        password: str,
        verificationCode: str,
        deviceId: str | None = None,
        timeout: int | None = None
    ) -> dict[str, Any]: ...
    def restore(self, email: str, password: str) -> Literal[200]: ...
    def logout(self) -> Literal[200]: ...
    def configure(self, age: int, gender: str) -> Literal[200]: ...
    def verify(self, email: str, code: str) -> Literal[200]: ...
    def request_verify_code(self, email: str, resetPassword: bool = False) -> Literal[200]: ...
    def activate_account(self, email: str, code: str) -> Literal[200]: ...
    def delete_account(self, password: str) -> Literal[200]: ...
    def change_password(self, email: str, password: str, code: str) -> Literal[200]: ...
    def check_device(self, deviceId: str) -> Literal[200]: ...
    def get_account_info(self) -> UserProfile: ...
    def upload_media(self, file: BinaryIO | bytes | str, fileType: Literal["audio", "gif", "image"]) -> str: ...
    def get_eventlog(self) -> dict[str, Any]: ...
    def sub_clients(self, start: int = 0, size: int = 25) -> CommunityList: ...
    def sub_clients_profile(self, start: int = 0, size: int = 25) -> dict[str, dict[str, Any]]: ...
    def get_user_info(self, userId: str) -> UserProfile: ...
    def watch_ad(self) -> Literal[200]: ...
    def get_chat_threads(self, start: int = 0, size: int = 25) -> ThreadList: ...
    def get_chat_thread(self, chatId: str) -> Thread: ...
    def get_chat_users(self, chatId: str, start: int = 0, size: int = 25) -> UserProfileList: ...
    def join_chat(self, chatId: str) -> Literal[200]: ...
    def leave_chat(self, chatId: str) -> Literal[200]: ...
    def start_chat(
        self,
        userId: list[str] | str,
        message: str,
        title: str | None = None,
        content: str | None = None,
        isGlobal: bool = False,
        publishToGlobal: bool = False
    ) -> Thread: ...
    def invite_to_chat(self, userId: list[str] | str, chatId: str) -> Literal[200]: ...
    def kick(self, userId: str, chatId: str, allowRejoin: bool = True) -> Literal[200]: ...
    def get_chat_messages(self, chatId: str, size: int = 25, pageToken: str | None = None) -> GetMessages: ...
    def get_message_info(self, chatId: str, messageId: str) -> Message: ...
    def get_community_info(self, comId: str) -> Community: ...
    def search_community(self, aminoId: str) -> CommunityList: ...
    def get_user_following(self, userId: str, start: int = 0, size: int = 25) -> UserProfileList: ...
    def get_user_followers(self, userId: str, start: int = 0, size: int = 25) -> UserProfileList: ...
    def get_user_visitors(self, userId: str, start: int = 0, size: int = 25) -> VisitorsList: ...
    def get_blocked_users(self, start: int = 0, size: int = 25) -> UserProfileList: ...
    @overload
    def get_blog_info(self, blogId: str) -> GetBlogInfo: ...
    @overload
    def get_blog_info(self, *, wikiId: str) -> GetWikiInfo: ...
    @overload
    def get_blog_info(self, *, quizId: str) -> GetBlogInfo: ...
    @overload
    def get_blog_info(self, *, fileId: str) -> SharedFolderFile: ...
    @overload
    def get_blog_info(self, blogId: str | None = None, wikiId: str | None = None, quizId: str | None = None, fileId: str | None = None) -> GetBlogInfo | GetWikiInfo | SharedFolderFile: ...
    @overload
    def get_blog_comments(
        self,
        blogId: str,
        *,
        sorting: Literal["newest", "oldest", "top"] = "newest",
        start: int = 0,
        size: int = 25
    ) -> CommentList: ...
    @overload
    def get_blog_comments(
        self,
        *,
        wikiId: str,
        sorting: Literal["newest", "oldest", "top"] = "newest",
        start: int = 0,
        size: int = 25
    ) -> CommentList: ...
    @overload
    def get_blog_comments(
        self,
        *,
        quizId: str,
        fileId: str | None = None,
        sorting: Literal["newest", "oldest", "top"] = "newest",
        start: int = 0,
        size: int = 25
    ) -> CommentList: ...
    @overload
    def get_blog_comments(
        self,
        *,
        fileId: str | None = None,
        sorting: Literal["newest", "oldest", "top"] = "newest",
        start: int = 0,
        size: int = 25
    ) -> CommentList: ...
    @overload
    def get_blog_comments(
        self,
        blogId: str | None = None,
        wikiId: str | None = None,
        quizId: str | None = None,
        fileId: str | None = None,
        sorting: Literal["newest", "oldest", "top"] = "newest",
        start: int = 0,
        size: int = 25
    ) -> CommentList: ...
    def get_blocker_users(self, start: int = 0, size: int = 25) -> list[str]: ...
    def get_wall_comments(self, userId: str, sorting: Literal["newest", "oldest", "top"], start: int = 0, size: int = 25) -> CommentList: ...
    @overload
    def flag(self, reason: str, flagType: int, userId: str, *, asGuest: bool = False) -> Literal[200]: ...
    @overload
    def flag(self, reason: str, flagType: int, *, blogId: str, asGuest: bool = False) -> Literal[200]: ...
    @overload
    def flag(self, reason: str, flagType: int, *, wikiId: str, asGuest: bool = False) -> Literal[200]: ...
    @overload
    def flag(self, reason: str, flagType: int, userId: str | None = None, blogId: str | None = None, wikiId: str | None = None, asGuest: bool = False) -> Literal[200]: ...
    def send_message(
        self,
        chatId: str,
        message: str | None = None,
        messageType: int = 0,
        file: BinaryIO | bytes | str | None = None,
        fileType: Literal["audio", "image", "gif"] | None = None,
        replyTo: str | None = None,
        mentionUserIds: list[str] | None = None,
        stickerId: str | None = None,
        embedId: str | None = None,
        embedType: int | None = None,
        embedLink: str | None = None,
        embedTitle: str | None = None,
        embedContent: str | None = None,
        embedImage: BinaryIO | bytes | str | None = None
    ) -> Literal[200]: ...
    def delete_message(self, chatId: str, messageId: str, asStaff: bool = False, reason: str | None = None) -> Literal[200]: ...
    def mark_as_read(self, chatId: str, messageId: str) -> Literal[200]: ...
    def edit_chat(
        self,
        chatId: str,
        doNotDisturb: bool | None = None,
        pinChat: bool | None = None,
        title: str | None = None,
        icon: str | None = None,
        backgroundImage: str | None = None,
        content: str | None = None,
        announcement: str | None = None,
        coHosts: list[str] | None = None,
        keywords: list[str] | None = None,
        pinAnnouncement: bool | None = None,
        publishToGlobal: bool | None = None,
        canTip: bool | None = None,
        viewOnly: bool | None = None,
        canInvite: bool | None = None,
        fansOnly: bool | None = None
    ) -> list[Literal[200]]: ...
    def visit(self, userId: str) -> Literal[200]: ...
    def send_coins(
        self,
        coins: int,
        blogId: str | None = None,
        chatId: str | None = None,
        objectId: str | None = None,
        transactionId: str | None = None
    ) -> Literal[200]: ...
    def follow(self, userId: list[str] | str) -> Literal[200]: ...
    def unfollow(self, userId: str) -> Literal[200]: ...
    def block(self, userId: str) -> Literal[200]: ...
    def unblock(self, userId: str) -> Literal[200]: ...
    def join_community(self, comId: str, invitationId: str | None = None) -> Literal[200]: ...
    def request_join_community(self, comId: str, message: str | None = None) -> Literal[200]: ...
    def leave_community(self, comId: str) -> Literal[200]: ...
    def flag_community(self, comId: str, reason: str, flagType: int, isGuest: bool = False) -> Literal[200]: ...
    def edit_profile(
        self,
        nickname: str | None = None,
        content: str | None = None,
        icon: BinaryIO | bytes | str | None = None,
        backgroundColor: str | None = None,
        backgroundImage: str | None = None,
        defaultBubbleId: str | None = None
    ) -> Literal[200]: ...
    def set_privacy_status(self, isAnonymous: bool = False, getNotifications: bool = False) -> Literal[200]: ...
    def set_amino_id(self, aminoId: str) -> Literal[200]: ...
    def get_linked_communities(self, userId: str) -> CommunityList: ...
    def get_unlinked_communities(self, userId: str) -> CommunityList: ...
    def reorder_linked_communities(self, comIds: list[int]) -> Literal[200]: ...
    def add_linked_community(self, comId: int) -> Literal[200]: ...
    def remove_linked_community(self, comId: int) -> Literal[200]: ...
    @overload
    def comment(self, message: str, userId: str, *, replyTo: str | None = None) -> Literal[200]: ...
    @overload
    def comment(self, message: str, *, blogId: str, replyTo: str | None = None) -> Literal[200]: ...
    @overload
    def comment(self, message: str, *, wikiId: str, replyTo: str | None = None) -> Literal[200]: ...
    @overload
    def comment(self, message: str, userId: str | None = None, blogId: str | None = None, wikiId: str | None = None, replyTo: str | None = None) -> Literal[200]: ...
    @overload
    def delete_comment(self, commentId: str, userId: str) -> Literal[200]: ...
    @overload
    def delete_comment(self, commentId: str, *, blogId: str) -> Literal[200]: ...
    @overload
    def delete_comment(self, commentId: str, *, wikiId: str) -> Literal[200]: ...
    @overload
    def delete_comment(self, commentId: str, userId: str | None = None, blogId: str | None = None, wikiId: str | None = None) -> Literal[200]: ...
    @overload
    def like_blog(self, blogId: list[str] | str) -> Literal[200]: ...
    @overload
    def like_blog(self, *, wikiId: str) -> Literal[200]: ...
    @overload
    def like_blog(self, blogId: list[str] | str | None = None, wikiId: str | None = None) -> Literal[200]: ...
    @overload
    def unlike_blog(self, blogId: str) -> Literal[200]: ...
    @overload
    def unlike_blog(self, *, wikiId: str) -> Literal[200]: ...
    @overload
    def unlike_blog(self, blogId: str | None = None, wikiId: str | None = None) -> Literal[200]: ...
    @overload
    def like_comment(self, commentId: str, userId: str) -> Literal[200]: ...
    @overload
    def like_comment(self, commentId: str, *, blogId: str) -> Literal[200]: ...
    @overload
    def like_comment(self, commentId: str, *, wikiId: str) -> Literal[200]: ...
    @overload
    def like_comment(self, commentId: str, userId: str | None = None, blogId: str | None = None, wikiId: str | None = None) -> Literal[200]: ...
    @overload
    def unlike_comment(self, commentId: str, userId: str) -> Literal[200]: ...
    @overload
    def unlike_comment(self, commentId: str, *, blogId: str) -> Literal[200]: ...
    @overload
    def unlike_comment(self, commentId: str, *, wikiId: str) -> Literal[200]: ...
    @overload
    def unlike_comment(self, commentId: str, userId: str | None = None, blogId: str | None = None, wikiId: str | None = None) -> Literal[200]: ...
    def get_membership_info(self) -> Membership: ...
    def get_ta_announcements(self, language: str = "en", start: int = 0, size: int = 25) -> BlogList: ...
    def get_wallet_info(self) -> WalletInfo: ...
    def get_wallet_history(self, start: int = 0, size: int = 25) -> WalletHistory: ...
    def get_from_deviceid(self, deviceId: str) -> str: ...
    def get_from_code(self, code: str) -> FromCode: ...
    def get_from_id(self, objectId: str, objectType: int, comId: int | None = None) -> FromCode: ...
    def get_supported_languages(self) -> list[str]: ...
    def claim_new_user_coupon(self) -> Literal[200]: ...
    def get_subscriptions(self, start: int = 0, size: int = 25) -> list[dict[str, Any]]: ...
    def get_all_users(self, type: Literal["online", "recent"] = "recent", start: int = 0, size: int = 25) -> UserProfileCountList: ...
    def accept_host(self, chatId: str, requestId: str) -> Literal[200]: ...
    def accept_organizer(self, chatId: str, requestId: str) -> Literal[200]: ...
    def link_identify(self, code: str) -> dict[str, Any]: ...
    def invite_to_vc(self, chatId: str, userId: str) -> Literal[200]: ...
    def wallet_config(self, level: int) -> Literal[200]: ...
    def purchase(self, objectId: str, objectType: int, autoRenew: bool = False) -> Literal[200]: ...
    def get_public_communities(self, language: str = "en", size: int = 25) -> CommunityList: ...
