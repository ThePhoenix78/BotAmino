from collections.abc import Callable
from typing import Any, TypeVar, Literal, overload
from threading import Thread
from websocket import WebSocket

from .lib.util import Channel, Event

__all__ = ("Callbacks", "SocketHandler",)

_T = TypeVar("_T")
_EventCallback = Callable[[_T], Any]
_ChannelCallbackT = TypeVar("_ChannelCallbackT", bound=_EventCallback[Channel])
_DefaultCallbackT = TypeVar("_DefaultCallbackT", bound=_EventCallback[dict[str, Any]])
_EventCallbackT = TypeVar("_EventCallbackT", bound=_EventCallback[Event])

class SocketHandler:
    device_id: str
    autoDevice: bool
    sid: str | None
    proxies: dict[str, str] | None
    def __init__(self, socket_trace: bool = False, debug: bool = False) -> None:
        self.socket_url: str
        self.debug: bool
        self.active: bool
        self.socket: WebSocket | None
        self.socket_thread: Thread | None
    def handle_message(self, data: bytes | str) -> None: ...
    def amino_socket_task(self) -> None: ...
    def run_amino_socket(self) -> None: ...
    def send(self, data: dict[str, Any] | bytes | str) -> None: ...
    def close(self) -> None: ...

class Callbacks:
    def __init__(self) -> None:
        self.handlers: dict[str, list[Callable[[Event], Any]]] = {}
        self.methods: dict[int, Callable[[bytes | str], None]]
        self.chat_methods: dict[str, Callable[[bytes | str], None]]
        self.chat_actions_start: dict[int, Callable[[bytes | str], None]]
        self.chat_actions_end: dict[int, Callable[[bytes | str], None]]
    def _resolve_chat_message(self, data: dict[str, Any]) -> None: ...
    def _resolve_chat_action_start(self, data: dict[str, Any]) -> None: ...
    def _resolve_chat_action_end(self, data: dict[str, Any]) -> None: ...
    def _resolve_agora_token_response(self, data: dict[str, Any]) -> None: ...
    def handle_message(self, data: dict[str, Any] | bytes | str) -> None: ...
    def call(self, type: str, data: dict[str, Any]) -> None: ...
    @overload
    def event(self, type: Literal["default"]) -> Callable[[_DefaultCallbackT], _DefaultCallbackT]: ...  # type: ignore
    @overload
    def event(self, type: Literal["on_fetch_channel"]) -> Callable[[_ChannelCallbackT], _ChannelCallbackT]: ...  # type: ignore
    @overload
    def event(self, type: str) -> Callable[[_EventCallbackT], _EventCallbackT]: ...
    def on_text_message(self, data: dict[str, Any]) -> None: ...
    def on_image_message(self, data: dict[str, Any]) -> None: ...
    def on_youtube_message(self, data: dict[str, Any]) -> None: ...
    def on_strike_message(self, data: dict[str, Any]) -> None: ...
    def on_voice_message(self, data: dict[str, Any]) -> None: ...
    def on_sticker_message(self, data: dict[str, Any]) -> None: ...
    def on_voice_chat_not_answered(self, data: dict[str, Any]) -> None: ...
    def on_voice_chat_cancelled(self, data: dict[str, Any]) -> None: ...
    def on_voice_chat_declined(self, data: dict[str, Any]) -> None: ...
    def on_video_chat_not_answered(self, data: dict[str, Any]) -> None: ...
    def on_video_chat_cancelled(self, data: dict[str, Any]) -> None: ...
    def on_video_chat_declined(self, data: dict[str, Any]) -> None: ...
    def on_avatar_chat_not_answered(self, data: dict[str, Any]) -> None: ...
    def on_avatar_chat_cancelled(self, data: dict[str, Any]) -> None: ...
    def on_avatar_chat_declined(self, data: dict[str, Any]) -> None: ...
    def on_delete_message(self, data: dict[str, Any]) -> None: ...
    def on_group_member_join(self, data: dict[str, Any]) -> None: ...
    def on_group_member_leave(self, data: dict[str, Any]) -> None: ...
    def on_chat_invite(self, data: dict[str, Any]) -> None: ...
    def on_chat_background_changed(self, data: dict[str, Any]) -> None: ...
    def on_chat_title_changed(self, data: dict[str, Any]) -> None: ...
    def on_chat_icon_changed(self, data: dict[str, Any]) -> None: ...
    def on_voice_chat_start(self, data: dict[str, Any]) -> None: ...
    def on_video_chat_start(self, data: dict[str, Any]) -> None: ...
    def on_avatar_chat_start(self, data: dict[str, Any]) -> None: ...
    def on_voice_chat_end(self, data: dict[str, Any]) -> None: ...
    def on_video_chat_end(self, data: dict[str, Any]) -> None: ...
    def on_avatar_chat_end(self, data: dict[str, Any]) -> None: ...
    def on_chat_content_changed(self, data: dict[str, Any]) -> None: ...
    def on_screen_room_start(self, data: dict[str, Any]) -> None: ...
    def on_screen_room_end(self, data: dict[str, Any]) -> None: ...
    def on_chat_host_transfered(self, data: dict[str, Any]) -> None: ...
    def on_text_message_force_removed(self, data: dict[str, Any]) -> None: ...
    def on_chat_removed_message(self, data: dict[str, Any]) -> None: ...
    def on_text_message_removed_by_admin(self, data: dict[str, Any]) -> None: ...
    def on_chat_tip(self, data: dict[str, Any]) -> None: ...
    def on_chat_pin_announcement(self, data: dict[str, Any]) -> None: ...
    def on_voice_chat_permission_open_to_everyone(self, data: dict[str, Any]) -> None: ...
    def on_voice_chat_permission_invited_and_requested(self, data: dict[str, Any]) -> None: ...
    def on_voice_chat_permission_invite_only(self, data: dict[str, Any]) -> None: ...
    def on_chat_view_only_enabled(self, data: dict[str, Any]) -> None: ...
    def on_chat_view_only_disabled(self, data: dict[str, Any]) -> None: ...
    def on_chat_unpin_announcement(self, data: dict[str, Any]) -> None: ...
    def on_chat_tipping_enabled(self, data: dict[str, Any]) -> None: ...
    def on_chat_tipping_disabled(self, data: dict[str, Any]) -> None: ...
    def on_timestamp_message(self, data: dict[str, Any]) -> None: ...
    def on_welcome_message(self, data: dict[str, Any]) -> None: ...
    def on_invite_message(self, data: dict[str, Any]) -> None: ...
    def on_user_typing_start(self, data: dict[str, Any]) -> None: ...
    def on_user_typing_end(self, data: dict[str, Any]) -> None: ...
    def on_fetch_channel(self, data: dict[str, Any]) -> None: ...
    def default(self, data: dict[str, Any]) -> None: ...
